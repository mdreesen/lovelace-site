{"version":3,"file":"static/chunks/638-cacff751111bd870.js","mappings":"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","sources":["webpack://_N_E/./node_modules/next/head.js","webpack://_N_E/./node_modules/react-parallax/lib/index.js","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/id.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/data.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/frameloop/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/errors.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-color.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/mix-complex.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/animators/instant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/wildcards.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/debug/record.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require('./dist/shared/lib/head')\n","!function webpackUniversalModuleDefinition(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\")):\"function\"==typeof define&&define.amd?define(\"react-parallax\",[\"react\"],t):\"object\"==typeof exports?exports[\"react-parallax\"]=t(require(\"react\")):e[\"react-parallax\"]=t(e.react)}(\"undefined\"!=typeof self?self:this,(function(e){return function(e){var t={};function __webpack_require__(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},__webpack_require__.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(__webpack_require__.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var r in e)__webpack_require__.d(n,r,function(t){return e[t]}.bind(null,r));return n},__webpack_require__.n=function(e){var t=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(t,\"a\",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p=\"\",__webpack_require__(__webpack_require__.s=3)}([function(t,n){t.exports=e},function(e,t,n){\"use strict\";function _typeof(e){return(_typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function _typeof(e){return typeof e}:function _typeof(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function _inherits(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=function _isNativeReflectConstruct(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||\"object\"!==_typeof(t)&&\"function\"!=typeof t?function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(e):t}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.Background=t.Parallax=void 0;var o=r(n(0)),i=function(e){_inherits(Parallax,e);var t=_createSuper(Parallax);function Parallax(){return _classCallCheck(this,Parallax),t.apply(this,arguments)}return Parallax}(o.default.Component);t.Parallax=i;var a=function(e){_inherits(Background,e);var t=_createSuper(Background);function Background(){return _classCallCheck(this,Background),t.apply(this,arguments)}return Background}(o.default.Component);t.Background=a},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.canUseDOM=t.getNodeHeight=t.isScrolledIntoView=t.getWindowHeight=void 0,t.getWindowHeight=function(e){if(!e)return 0;var t=window,n=document,r=n.documentElement,o=n.getElementsByTagName(\"body\")[0];return t.innerHeight||r.clientHeight||o.clientHeight},t.isScrolledIntoView=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2?arguments[2]:void 0;if(!r)return!1;var o=e.getBoundingClientRect().top-n,i=e.getBoundingClientRect().bottom+n;return o<=t.getWindowHeight(r)&&i>=0},t.getNodeHeight=function(e,n){return e?n&&\"clientHeight\"in n?n.clientHeight:t.getWindowHeight(e):0},t.canUseDOM=function(){return!(\"undefined\"==typeof window||!window.document||!window.document.createElement)}},function(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0}),t.Background=t.Parallax=void 0;var o=r(n(4));t.Parallax=o.default;var i=r(n(7));t.Background=i.default},function(e,t,n){\"use strict\";function _typeof(e){return(_typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function _typeof(e){return typeof e}:function _typeof(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=function _isNativeReflectConstruct(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||\"object\"!==_typeof(t)&&\"function\"!=typeof t?function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(e):t}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(n(0)),i=n(1),a=n(5),c=n(2),u=r(n(6)),s={position:\"absolute\",left:\"50%\",WebkitTransform:\"translate3d(-50%, 0, 0)\",transform:\"translate3d(-50%, 0, 0)\",WebkitTransformStyle:\"preserve-3d\",WebkitBackfaceVisibility:\"hidden\",MozBackfaceVisibility:\"hidden\",MsBackfaceVisibility:\"hidden\"},l=function(e){!function _inherits(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}(Parallax,e);var t=_createSuper(Parallax);function Parallax(e){var n;return function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,Parallax),(n=t.call(this,e)).onWindowResize=function(){n.parentHeight=c.getNodeHeight(n.canUseDOM,n.parent),n.updatePosition()},n.onWindowLoad=function(){n.updatePosition()},n.onScroll=function(){if(n.canUseDOM){var e=Date.now();e-n.timestamp>=10&&c.isScrolledIntoView(n.node,100,n.canUseDOM)&&(window.requestAnimationFrame(n.updatePosition),n.timestamp=e)}},n.onContentMount=function(e){n.content=e},n.updatePosition=function(){if(n.content){var e=!1;n.contentHeight=n.content.getBoundingClientRect().height,n.contentWidth=n.node.getBoundingClientRect().width,n.img&&n.img.naturalWidth/n.img.naturalHeight<n.contentWidth/n.getImageHeight()&&(e=!0);var t=a.getRelativePosition(n.node,n.canUseDOM),r=!!n.img,o=n.bg&&n.state.splitChildren.bgChildren.length>0;r&&n.setImagePosition(t,e),o&&n.setBackgroundPosition(t),r||o||n.setState({percentage:t})}},n.state={bgImage:e.bgImage,bgImageSrcSet:e.bgImageSrcSet,bgImageSizes:e.bgImageSizes,imgStyle:s,bgStyle:Object.assign(Object.assign({},s),e.bgStyle),percentage:0,splitChildren:a.getSplitChildren(e)},n.canUseDOM=c.canUseDOM(),n.node=null,n.content=null,n.bgImageLoaded=!1,n.bgImageRef=void 0,n.parent=e.parent,n.parentHeight=c.getNodeHeight(n.canUseDOM,n.parent),n.timestamp=Date.now(),n.isDynamicBlur=a.getHasDynamicBlur(e.blur),n}return function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}(Parallax,[{key:\"componentDidMount\",value:function componentDidMount(){var e=this.props.parent,t=this.state,n=t.bgImage,r=t.bgImageSrcSet,o=t.bgImageSizes;this.parent=e||document,this.addListeners(),n?this.loadImage(n,r,o):this.updatePosition()}},{key:\"componentDidUpdate\",value:function componentDidUpdate(e){var t=this.props,n=t.parent,r=t.bgImage,o=t.bgImageSrcSet,i=t.bgImageSizes,a=this.state.bgImage;e.parent!==n&&(this.removeListeners(this.parent),this.parent=n,n&&this.addListeners()),this.parentHeight=c.getNodeHeight(this.canUseDOM,this.parent),a!==r&&this.loadImage(r,o,i)}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.removeListeners(this.parent),this.releaseImage()}},{key:\"setBackgroundPosition\",value:function setBackgroundPosition(e){var t=this.props,n=t.disabled,r=t.strength,o=Object.assign({},this.state.bgStyle);if(!n){var i=\"translate3d(-50%, \".concat((r<0?r:0)-r*e,\"px, 0)\");o.WebkitTransform=i,o.transform=i}this.setState({bgStyle:o,percentage:e})}},{key:\"setImagePosition\",value:function setImagePosition(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.props,r=n.disabled,o=n.strength,i=n.blur,c=t?\"auto\":\"\".concat(this.getImageHeight(),\"px\"),u=t?\"\".concat(this.contentWidth,\"px\"):\"auto\",s=Object.assign(Object.assign({},this.state.imgStyle),{height:c,width:u});if(!r){var l=o<0,f=(l?o:0)-o*e,p=\"translate3d(-50%, \".concat(f,\"px, 0)\"),d=\"none\";i&&(d=\"blur(\".concat(a.getBlurValue(this.isDynamicBlur,i,e),\"px)\")),s.WebkitTransform=p,s.transform=p,s.WebkitFilter=d,s.filter=d}this.setState({imgStyle:s,percentage:e})}},{key:\"getImageHeight\",value:function getImageHeight(){var e=this.props.strength,t=(e<0?2.5:1)*Math.abs(e);return Math.floor(this.contentHeight+t)}},{key:\"loadImage\",value:function loadImage(e,t,n){var r=this;this.releaseImage(),this.bgImageRef=new Image,this.bgImageRef.onload=function(o){r.setState({bgImage:e,bgImageSrcSet:t,bgImageSizes:n},(function(){return r.updatePosition()})),r.props.onLoad&&r.props.onLoad(o)},this.bgImageRef.onerror=this.bgImageRef.onload,this.bgImageRef.src=e,this.bgImageRef.srcset=t||\"\",this.bgImageRef.sizes=n||\"\"}},{key:\"releaseImage\",value:function releaseImage(){this.bgImageRef&&(this.bgImageRef.onload=null,this.bgImageRef.onerror=null,delete this.bgImageRef)}},{key:\"addListeners\",value:function addListeners(){this.canUseDOM&&this.parent&&(this.parent.addEventListener(\"scroll\",this.onScroll,!1),window.addEventListener(\"resize\",this.onWindowResize,!1),window.addEventListener(\"load\",this.onWindowLoad,!1))}},{key:\"removeListeners\",value:function removeListeners(e){this.canUseDOM&&(e&&e.removeEventListener(\"scroll\",this.onScroll,!1),window.removeEventListener(\"resize\",this.onWindowResize,!1),window.removeEventListener(\"load\",this.onWindowLoad,!1))}},{key:\"render\",value:function render(){var e=this,t=this.props,n=t.className,r=t.style,i=t.bgClassName,a=t.contentClassName,c=t.bgImageAlt,s=t.renderLayer,l=t.bgImageStyle,f=t.lazy,p=this.state,d=p.bgImage,g=p.bgImageSrcSet,_=p.bgImageSizes,y=p.percentage,h=p.imgStyle,b=p.bgStyle,m=p.splitChildren;return o.default.createElement(\"div\",{className:\"react-parallax \".concat(n),style:Object.assign({position:\"relative\",overflow:\"hidden\"},r),ref:function ref(t){e.node=t}},d?o.default.createElement(\"img\",{className:i,src:d,srcSet:g,sizes:_,ref:function ref(t){e.img=t},alt:c,style:Object.assign(Object.assign({},h),l),loading:f?\"lazy\":\"eager\"}):null,s?s(-(y-1)):null,m.bgChildren.length>0?o.default.createElement(\"div\",{className:\"react-parallax-background-children\",ref:function ref(t){e.bg=t},style:b},m.bgChildren):null,o.default.createElement(u.default,{onMount:this.onContentMount,className:a},m.children))}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(e){return{splitChildren:a.getSplitChildren(e)}}}]),Parallax}(i.Parallax);l.defaultProps={bgClassName:\"react-parallax-bgimage\",bgImageAlt:\"\",className:\"\",contentClassName:\"\",disabled:!1,strength:100},t.default=l},function(e,t,n){\"use strict\";function _typeof(e){return(_typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function _typeof(e){return typeof e}:function _typeof(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}Object.defineProperty(t,\"__esModule\",{value:!0}),t.setBlur=t.getBlurValue=t.getHasDynamicBlur=t.getSplitChildren=t.getRelativePosition=t.getPercentage=void 0;var r=n(0),o=n(2);t.getPercentage=function(e,t,n){return(n-e)/(t-e)||0},t.getRelativePosition=function(e,n){if(!n)return 0;var r=e.getBoundingClientRect(),i=r.top,a=r.height,c=o.getNodeHeight(n),u=a>c?a:c,s=Math.round(i>u?u:i);return t.getPercentage(0,u,s)},t.getSplitChildren=function(e){var t=[],n=r.Children.toArray(e.children);return n.forEach((function(e,r){var o=e;o.type&&o.type.isParallaxBackground&&(t=t.concat(n.splice(r,1)))})),{bgChildren:t,children:n}},t.getHasDynamicBlur=function(e){return\"object\"===_typeof(e)&&void 0!==e.min&&void 0!==e.max},t.getBlurValue=function(e,t,n){return e?t.min+(1-n)*t.max:t},t.setBlur=function(e,t){e.style.webkitFilter=\"blur(\".concat(t,\"px)\"),e.style.filter=\"blur(\".concat(t,\"px)\")}},function(e,t,n){\"use strict\";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(n(0));t.default=function ParallaxChildren(e){var t=e.children,n=e.onMount,r=e.className;return o.default.createElement(\"div\",{ref:function ref(e){return n(e)},className:r||\"react-parallax-content\",style:{position:\"relative\"}},t)}},function(e,t,n){\"use strict\";function _typeof(e){return(_typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function _typeof(e){return typeof e}:function _typeof(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=function _isNativeReflectConstruct(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var n,r=_getPrototypeOf(e);if(t){var o=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||\"object\"!==_typeof(t)&&\"function\"!=typeof t?function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}(e):t}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(n(0)),i=function(e){!function _inherits(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}(Background,e);var t=_createSuper(Background);function Background(){return _classCallCheck(this,Background),t.apply(this,arguments)}return function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}(Background,[{key:\"render\",value:function render(){var e=this.props,t=e.className,n=e.children;return o.default.createElement(\"div\",{className:\"react-parallax-background \".concat(t)},n)}}]),Background}(n(1).Background);i.defaultProps={className:\"\"},i.isParallaxBackground=!0,t.default=i}])}));","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    useIsomorphicLayoutEffect(() => {\n        visualElement && visualElement.render();\n    });\n    useEffect(() => {\n        visualElement && visualElement.updateFeatures();\n    });\n    /**\n     * Ideally this function would always run in a useEffect.\n     *\n     * However, if we have optimised appear animations to handoff from,\n     * it needs to happen synchronously to ensure there's no flash of\n     * incorrect styles in the event of a hydration error.\n     *\n     * So if we detect a situtation where optimised appear animations\n     * are running, we use useLayoutEffect to trigger animations.\n     */\n    const useAnimateChangesEffect = window.HandoffAppearAnimations\n        ? useIsomorphicLayoutEffect\n        : useEffect;\n    useAnimateChangesEffect(() => {\n        if (visualElement && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","function isRefObject(ref) {\n    return (typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\nexport { isAnimationControls };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nlet id = 1;\nfunction useProjectionId() {\n    return useConstant(() => {\n        if (globalProjectionState.hasEverUpdated) {\n            return id++;\n        }\n    });\n}\n\nexport { useProjectionId };\n","import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { useProjectionId } from '../projection/node/id.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */\n        const projectionId = isStatic ? undefined : useProjectionId();\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst isCSSVariableToken = checkStringStartsWith(\"var(--\");\nconst cssVariableRegex = /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)/g;\n\nexport { cssVariableRegex, isCSSVariableName, isCSSVariableToken };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","const clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nexport { clamp };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, projectionId, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style && isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            try {\n                renderState.dimensions =\n                    typeof instance.getBBox ===\n                        \"function\"\n                        ? instance.getBBox()\n                        : instance.getBoundingClientRect();\n            }\n            catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0,\n                };\n            }\n            buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n            renderSVG(instance, renderState);\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","function createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two arrays, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let toRun = [];\n    let toRunNextFrame = [];\n    /**\n     *\n     */\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            // If the buffer doesn't already contain this callback, add it\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                // If we're adding it to the currently running buffer, update its measured size\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            // Clear the next frame list\n            toRunNextFrame.length = 0;\n            // Execute this frame\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","const frameData = {\n    delta: 0,\n    timestamp: 0,\n    isProcessing: false,\n};\n\nexport { frameData };\n","import { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frameData);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frameData.delta = useDefaultElapsed\n        ? 1000 / 60\n        : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n    frameData.timestamp = timestamp;\n    frameData.isProcessing = true;\n    stepsOrder.forEach(processStep);\n    frameData.isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        requestAnimationFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!frameData.isProcessing)\n        requestAnimationFrame(processFrame);\n};\nconst frame = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nfunction cancelFrame(process) {\n    stepsOrder.forEach((key) => steps[key].cancel(process));\n}\n\nexport { cancelFrame, frame, steps, stepsOrder };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/index.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","const noop = (any) => any;\n\nexport { noop };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/index.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","const featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nexport { supports };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nexport { mix };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mix } from './mix.mjs';\nimport { invariant } from './errors.mjs';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nimport { hex } from '../value/types/color/hex.mjs';\nimport { rgba } from '../value/types/color/rgba.mjs';\nimport { hsla } from '../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { cssVariableRegex } from '../../../render/dom/utils/is-css-variable.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { colorRegex, floatRegex, isString, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst cssVarTokeniser = {\n    regex: cssVariableRegex,\n    countKey: \"Vars\",\n    token: \"${v}\",\n    parse: noop,\n};\nconst colorTokeniser = {\n    regex: colorRegex,\n    countKey: \"Colors\",\n    token: \"${c}\",\n    parse: color.parse,\n};\nconst numberTokeniser = {\n    regex: floatRegex,\n    countKey: \"Numbers\",\n    token: \"${n}\",\n    parse: number.parse,\n};\nfunction tokenise(info, { regex, countKey, token, parse }) {\n    const matches = info.tokenised.match(regex);\n    if (!matches)\n        return;\n    info[\"num\" + countKey] = matches.length;\n    info.tokenised = info.tokenised.replace(regex, token);\n    info.values.push(...matches.map(parse));\n}\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const info = {\n        value: originalValue,\n        tokenised: originalValue,\n        values: [],\n        numVars: 0,\n        numColors: 0,\n        numNumbers: 0,\n    };\n    if (info.value.includes(\"var(--\"))\n        tokenise(info, cssVarTokeniser);\n    tokenise(info, colorTokeniser);\n    tokenise(info, numberTokeniser);\n    return info;\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            if (i < numVars) {\n                output = output.replace(cssVarTokeniser.token, v[i]);\n            }\n            else if (i < numVars + numColors) {\n                output = output.replace(colorTokeniser.token, color.transform(v[i]));\n            }\n            else {\n                output = output.replace(numberTokeniser.token, sanitize(v[i]));\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nconst mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return origin.startsWith(\"var(\")\n            ? mixImmediate(origin, target)\n            : mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numVars === targetStats.numVars &&\n        originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { invariant } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { clamp } from './clamp.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        return color.test(v) ? mixColor : mixComplex;\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","import { mix } from '../mix.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mix(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { frame, cancelFrame } from '../../../frameloop/index.mjs';\nimport { frameData } from '../../../frameloop/data.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),\n    };\n};\n\nexport { frameloopDriver };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        resolveFinishedPromise && resolveFinishedPromise();\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            currentTime = (timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay;\n        const isInDelayPhase = timeWithoutDelay < 0;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = currentTime >= totalDuration;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" ||\n                (playState === \"running\" && done) ||\n                (speed < 0 && currentTime <= 0));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        updateFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","import { cancelFrame, frame } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const cancelAnimation = () => animation.cancel();\n    const safeCancel = () => {\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n}\n\nexport { createAcceleratedAnimation };\n","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delay\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: 0,\n            delay,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        complex.test(value) && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction isZero(value) {\n    return (value === 0 ||\n        (typeof value === \"string\" &&\n            parseFloat(value) === 0 &&\n            value.indexOf(\" \") === -1));\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\"\n        ? 0\n        : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, getZeroUnit, isTransitionDefined, isZero };\n","function fillWildcardKeyframes(origin, [...keyframes]) {\n    /**\n     * Ensure an wildcard keyframes are hydrated by the origin.\n     */\n    for (let i = 0; i < keyframes.length; i++) {\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? origin : keyframes[i - 1];\n        }\n    }\n    return keyframes;\n}\n\nexport { fillWildcardKeyframes };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isZero, getZeroUnit } from './transitions.mjs';\nimport { fillWildcardKeyframes } from './wildcards.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let origin = transition.from !== undefined ? transition.from : value.get();\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */\n        origin = getAnimatableNone(valueName, target);\n    }\n    else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    }\n    else if (!Array.isArray(target) &&\n        isZero(target) &&\n        typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    /**\n     * If the target has been defined as a series of keyframes\n     */\n    if (Array.isArray(target)) {\n        return fillWildcardKeyframes(origin, target);\n    }\n    else {\n        return [origin, target];\n    }\n}\n\nexport { getKeyframes };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { frameData } from '../frameloop/data.mjs';\nimport { frame } from '../frameloop/index.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"10.12.4\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                frame.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => frame.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, motionValue };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { frame } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { frame, cancelFrame } from '../../frameloop/index.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import { frame } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { frame, cancelFrame } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { cancelFrame, steps, frame } from '../../frameloop/index.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            frame.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.12.4\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.12.4 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { frame, cancelFrame } from '../frameloop/index.mjs';\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update(this.props, this.prevProps);\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n"],"names":["module","exports","__webpack_require__","e","self","t","__nested_webpack_require_387__","n","r","i","l","call","m","c","d","o","Object","defineProperty","enumerable","get","Symbol","toStringTag","value","__esModule","create","bind","default","prototype","hasOwnProperty","p","s","_typeof","iterator","constructor","_classCallCheck","_inherits","writable","configurable","_setPrototypeOf","setPrototypeOf","__proto__","_createSuper","Reflect","construct","sham","Proxy","Date","toString","_getPrototypeOf","arguments","apply","getPrototypeOf","__importDefault","Background","Parallax","Component","a","canUseDOM","getNodeHeight","isScrolledIntoView","getWindowHeight","window","document","documentElement","getElementsByTagName","innerHeight","clientHeight","length","getBoundingClientRect","top","bottom","createElement","_defineProperties","key","u","position","left","WebkitTransform","transform","WebkitTransformStyle","WebkitBackfaceVisibility","MozBackfaceVisibility","MsBackfaceVisibility","onWindowResize","parentHeight","parent","updatePosition","onWindowLoad","onScroll","now","timestamp","node","requestAnimationFrame","onContentMount","content","contentHeight","height","contentWidth","width","img","naturalWidth","naturalHeight","getImageHeight","getRelativePosition","bg","state","splitChildren","bgChildren","setImagePosition","setBackgroundPosition","setState","percentage","bgImage","bgImageSrcSet","bgImageSizes","imgStyle","bgStyle","assign","getSplitChildren","bgImageLoaded","bgImageRef","isDynamicBlur","getHasDynamicBlur","blur","props","addListeners","loadImage","removeListeners","releaseImage","disabled","strength","concat","getBlurValue","WebkitFilter","filter","Math","floor","abs","Image","onload","onLoad","onerror","src","srcset","sizes","addEventListener","removeEventListener","className","style","bgClassName","contentClassName","bgImageAlt","renderLayer","bgImageStyle","f","lazy","g","_","y","h","b","overflow","ref","srcSet","alt","loading","onMount","children","defaultProps","setBlur","getPercentage","round","Children","toArray","forEach","type","isParallaxBackground","splice","min","max","webkitFilter","isValidProp","MotionConfigContext","react","createContext","transformPagePoint","isStatic","reducedMotion","MotionContext","PresenceContext_PresenceContext","isBrowser","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","LazyContext","strict","isRefObject","isVariantLabel","v","Array","isArray","isAnimationControls","start","variantPriorityOrder","variantProps","isControllingVariants","animate","some","name","isVariantNode","Boolean","variants","variantLabelsAsDependency","prop","join","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","useConstant","init","useRef","current","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","id","LayoutGroupContext","SwitchLayoutGroupContext","motionComponentSymbol","for","lowercaseSVGElements","isSVGComponent","includes","indexOf","test","scaleCorrectors","transformPropOrder","transformProps","Set","isForcedMotionValue","layoutId","has","startsWith","undefined","isMotionValue","getVelocity","translateAlias","x","z","transformPerspective","numTransforms","checkStringStartsWith","token","isCSSVariableName","isCSSVariableToken","getValueAsType","clamp","number","parse","parseFloat","alpha","scale","sanitize","floatRegex","colorRegex","singleColorRegex","isString","createUnitType","endsWith","unit","split","degrees","percent","px","vh","vw","progressPercentage","type_int_int","numberValueTypes","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","maxWidth","maxHeight","size","right","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","originX","originY","originZ","zIndex","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","latestValues","options","transformTemplate","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","valueType","valueAsType","buildTransform","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformString","transformName","trim","createHtmlRenderState","copyRawValuesOnly","target","source","useHTMLProps","visualState","htmlProps","useStyle","styleProp","useInitialMotionValues","useMemo","transformValues","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","isValidMotionProp","shouldForward","require","_a","calcOrigin","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","viewBox","attrs","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","keys","createSvgRenderState","tag","toLowerCase","useSVGProps","_isStatic","visualProps","rawStyles","camelToDash","str","replace","renderHTML","element","projection","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps","prevProps","newValues","scrape_motion_values_scrapeMotionValuesFromProps","targetKey","charAt","toUpperCase","substring","resolveVariantFromProps","definition","custom","currentValues","currentVelocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","makeUseVisualState","context","useContext","presenceContext","make","makeState","createRenderState","makeLatestValues","scrapeMotionValues","values","motionValues","initial","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","index","mount","instance","config","svgMotionConfig","useVisualState","getBBox","tagName","htmlMotionConfig","addDomEvent","eventName","handler","passive","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","combineFunctions","pipe","transformers","reduce","createLock","lock","openLock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","isMounted","update","frameData","delta","isProcessing","useDefaultElapsed","runNextFrame","stepsOrder","steps","acc","createRenderStep","toRun","toRunNextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","immediate","addToCurrentFrame","buffer","add","push","cancel","delete","process","processStep","stepId","processFrame","startLoop","frameloop_frame","cancelFrame","addHoverEvent","isActive","callbackName","handleEvent","info","getProps","animationState","whileHover","setActive","isNodeOrChild","child","parentElement","noop","any","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","all","shallowCompare","next","prev","prevLength","resolveVariant","visualElement","getCurrent","velocity","optimizedAppearDataAttribute","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","instantAnimationState","isBezierDefinition","easing","cubicBezierAsString","supportedWaapiEasing","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","featureTests","waapi","Element","results","supports","calcBezier","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","aX","isEasingArray","mirrorEasing","reverseEasing","sin","acos","circInOut","backInOut","anticipate","pow","easingLookup","easingDefinitionToFunction","invariant","x1","y1","x2","y2","isColorString","testProp","splitColor","aName","bName","cName","match","clampRgbUnit","rgbUnit","rgba","red","green","blue","alpha$1","hex","parseInt","hsla","hue","saturation","lightness","color","from","to","progress","hueToRgb","q","mixLinearColor","fromExpo","sqrt","colorTypes","getColorType","find","asRGBA","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","cssVarTokeniser","regex","countKey","colorTokeniser","numberTokeniser","tokenise","matches","tokenised","map","analyseComplexValue","originalValue","numVars","numColors","numNumbers","parseComplexValue","createTransformer","numValues","output","convertNumbersToZero","complex","_b","isNaN","getAnimatableNone","parsed","transformer","mixImmediate","getMixer","mixComplex","mixArray","blendValue","fromThis","mixObject","template","originStats","targetStats","canInterpolate","warning","toFromDifference","mixNumber","interpolate","input","isClamp","mixer","inputLength","reverse","mixers","createMixers","customMixer","mixerFactory","detectMixerFactory","numMixers","easingFunction","interpolator","progressInRange","keyframes","duration","keyframeValues","times","easingFunctions","done","absoluteTimes","defaultOffset","arr","fillOffset","remaining","offsetProgress","mapTimeToKeyframe","calculatedDuration","calcGeneratorVelocity","resolveValue","frameDuration","prevT","calcAngularFreq","undampedFreq","dampingRatio","durationKeys","physicsKeys","isSpringType","spring","restDelta","restSpeed","resolveSpring","stiffness","damping","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","exponentialDecay","safeMin","exp","factor","initialGuess","approximateRoot","result","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","checkCatchBoundary","hasUpdatedFrame","frameloopDriver","passTimestamp","stop","performance","calcGeneratorDuration","generator","Infinity","types","decay","tween","animateValue","autoplay","delay","driver","keyframes$1","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","resolveFinishedPromise","currentFinishedPromise","animationDriver","mapNumbersToKeyframes","mirroredGenerator","speed","hasStopped","updateFinishedPromise","Promise","resolve","generatorFactory","playState","holdTime","startTime","cancelTime","resolvedDuration","totalDuration","currentTime","tick","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","iterationProgress","iterationIsOdd","isAnimationFinished","finish","stopAnimationDriver","play","controls","then","reject","time","newTime","newSpeed","pause","complete","sample","acceleratedValues","requiresPregeneratedKeyframes","valueName","isWaapiSupportedEasing","every","underDampedSpring","criticallyDampedSpring","keyframesTransition","getDefaultTransition","valueKey","isAnimatable","maxDefaults","applyDefaultFilter","slice","defaultValue","functionRegex","functions","defaultValueTypes","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","getDefaultValueType","animatable_none_getAnimatableNone","defaultValueType","isZero","getZeroUnit","potentialUnitType","getValueTransition","animateMotionValue","valueTransition","getKeyframes","isTargetAnimatable","fillWildcardKeyframes","originKeyframe","targetKeyframe","isOriginAnimatable","set","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","createInstantAnimation","setValue","owner","HTMLElement","acceleratedAnimation","createAcceleratedAnimation","canAccelerateAnimation","sampleAnimation","pregeneratedKeyframes","animateStyle","keyframeOptions","mapEasingToNativeEasing","iterations","direction","cancelAnimation","safeCancel","onfinish","getFinalKeyframe","playbackRate","setWithVelocity","isWillChangeMotionValue","isNumericalString","isZeroValueString","addUniqueItem","item","removeItem","SubscriptionManager","subscriptions","notify","numSubscriptions","getSize","clear","isFloat","MotionValue","version","timeDelta","lastUpdated","canTrackVelocity","events","updateAndNotify","render","postRender","scheduleVelocityCheck","change","velocityChange","renderRequest","velocityCheck","hasAnimated","onChange","subscription","on","unsubscribe","read","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","jump","getPrevious","startAnimation","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue","testValueType","dimensionValueTypes","findDimensionValueType","valueTypes","findValueType","animateTarget","transitionOverride","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","HandoffAppearAnimations","appearId","shouldReduceMotion","remove","setTarget","hasValue","addValue","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","first","last","sortNodePosition","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","exit_id","PanSession","handlers","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","panInfo","initialInfo","onSessionStart","updateHandlers","subtractPoint","lastDevicePoint","PanSession_getVelocity","timestampedPoint","lastPoint","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","scalePoint","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","measureViewportBox","transformBoxPoints","topLeft","bottomRight","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","stopAnimation","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","panSession","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","root","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","constraints_calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","asyncHandler","pixelsToPercent","pixels","correctBorderRadius","correct","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","componentDidUpdate","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","MeasureLayout","usePresence","useId","applyTo","boxShadow","treeScale","projectionDelta","shadow","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","delta_remove_xKeys","delta_remove_yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","aspectRatio","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","isDirty","transformAxes","create_projection_node_id","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","elementId","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","registerPotentialNode","notifyListeners","args","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","unmount","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","mountNodeEarly","resetTransformStyle","notifyLayoutUpdate","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","nodeBox","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","mixAxis","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","canMix","animateSingleValue","motionValue$1","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","resetValues","setStaticValue","styles","visibility","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","searchNode","searchElement","querySelector","DocumentProjectionNode","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","splitCSSVariableRegex","getVariableValue","fallback","parseCSSVariable","exec","getPropertyValue","positionalKeys","isPositionalKey","hasPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","positionalValues","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","fromIndex","removeNonTranslationalTransform","removedTransforms","scrollY","pageYOffset","convertedTarget","scrollTo","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","numFeatures","propEventHandlers","numVariantProps","VisualElement","reducedMotionConfig","features","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","baseTarget","initialValues","manuallyAnimateOnMount","initialMotionValues","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","valueIsTransform","removeOnChange","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","initialLayoutGroupConfig","ProjectionNodeConstructor","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","prevPresenceContext","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","getVariantContext","startAtParent","closestVariantNode","removeValueFromRenderState","readValue","readValueFromInstance","setBaseTarget","getBaseTarget","valueFromInitial","getBaseTargetFromProps","DOMVisualElement","compareDocumentPosition","getOrigin","transitionOrigin","getOriginFromTransition","checkTargetForNewValues","newValueKeys","numNewValues","targetValue","HTMLVisualElement","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","getAttribute","create_visual_element_createDomVisualElement","createAnimationState","animateVisualElement","resolvedDefinition","whileInView","whileDrag","whileFocus","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","prevProp","variantDidChange","shouldAnimateType","definitionList","resolvedValues","allKeys","markToAnimate","blockInitialAnimation","fallbackAnimation","fallbackTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","subscribe","prevAnimate","prevIsPresent","exitAnimation","hasEnteredView","isInView","startObserver","viewport","rootMargin","amount","once","threshold","onIntersectionUpdate","isIntersecting","onViewportEnter","onViewportLeave","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","hasOptionsChanged","hasViewportOptionChanged","prevViewport","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","endPointerPress","endEvent","endInfo","checkPressEnd","onTapCancel","removePointerUpListener","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","handleKeydown","keydownEvent","handleKeyup","keyupEvent","removeKeydownListener","handleBlur","removeBlurListener","removePointerListener","removeFocusListener","onFocus","isFocusVisible","onBlur","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","dragControls","motion","createMotionProxy","createConfig","customMotionComponentConfig","motion_createMotionComponent","createVisualElement","useRender","ForwardRefComponent","forwardRef","externalRef","configAndProps","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useVisualElement","lazyContext","visualElementRef","renderer","useInsertionEffect","useAnimateChangesEffect","Provider","useCallback","componentCache","_target","create_config_createDomMotionConfig","forwardMotionProps","baseConfig","createUseRender","useVisualProps","filteredProps","filterProps","isDom","elementProps","renderedChildren"],"sourceRoot":""}